# coding: utf-8

"""
    api_platform

    This API exposes detectors for sensitive data in arbitrary string payloads.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Condition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'min_num_findings': 'int',
        'min_confidence': 'Confidence',
        'detector': 'Detector'
    }

    attribute_map = {
        'min_num_findings': 'minNumFindings',
        'min_confidence': 'minConfidence',
        'detector': 'detector'
    }

    def __init__(self, min_num_findings=None, min_confidence=None, detector=None, local_vars_configuration=None):  # noqa: E501
        """Condition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._min_num_findings = None
        self._min_confidence = None
        self._detector = None
        self.discriminator = None

        if min_num_findings is not None:
            self.min_num_findings = min_num_findings
        if min_confidence is not None:
            self.min_confidence = min_confidence
        if detector is not None:
            self.detector = detector

    @property
    def min_num_findings(self):
        """Gets the min_num_findings of this Condition.  # noqa: E501

        The minimum number of findings required in order for this detector to be reported.  # noqa: E501

        :return: The min_num_findings of this Condition.  # noqa: E501
        :rtype: int
        """
        return self._min_num_findings

    @min_num_findings.setter
    def min_num_findings(self, min_num_findings):
        """Sets the min_num_findings of this Condition.

        The minimum number of findings required in order for this detector to be reported.  # noqa: E501

        :param min_num_findings: The min_num_findings of this Condition.  # noqa: E501
        :type: int
        """

        self._min_num_findings = min_num_findings

    @property
    def min_confidence(self):
        """Gets the min_confidence of this Condition.  # noqa: E501


        :return: The min_confidence of this Condition.  # noqa: E501
        :rtype: Confidence
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this Condition.


        :param min_confidence: The min_confidence of this Condition.  # noqa: E501
        :type: Confidence
        """

        self._min_confidence = min_confidence

    @property
    def detector(self):
        """Gets the detector of this Condition.  # noqa: E501


        :return: The detector of this Condition.  # noqa: E501
        :rtype: Detector
        """
        return self._detector

    @detector.setter
    def detector(self, detector):
        """Sets the detector of this Condition.


        :param detector: The detector of this Condition.  # noqa: E501
        :type: Detector
        """

        self._detector = detector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Condition):
            return True

        return self.to_dict() != other.to_dict()
