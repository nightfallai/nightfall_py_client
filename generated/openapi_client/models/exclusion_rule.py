# coding: utf-8

"""
    api_platform

    This API exposes detectors for sensitive data in arbitrary string payloads.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ExclusionRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'match_type': 'str',
        'exclusion_type': 'str',
        'regex': 'Regex',
        'word_list': 'WordList'
    }

    attribute_map = {
        'match_type': 'matchType',
        'exclusion_type': 'exclusionType',
        'regex': 'regex',
        'word_list': 'wordList'
    }

    def __init__(self, match_type=None, exclusion_type=None, regex=None, word_list=None, local_vars_configuration=None):  # noqa: E501
        """ExclusionRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._match_type = None
        self._exclusion_type = None
        self._regex = None
        self._word_list = None
        self.discriminator = None

        if match_type is not None:
            self.match_type = match_type
        if exclusion_type is not None:
            self.exclusion_type = exclusion_type
        if regex is not None:
            self.regex = regex
        if word_list is not None:
            self.word_list = word_list

    @property
    def match_type(self):
        """Gets the match_type of this ExclusionRule.  # noqa: E501

        The match type of exclusion rule.  # noqa: E501

        :return: The match_type of this ExclusionRule.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this ExclusionRule.

        The match type of exclusion rule.  # noqa: E501

        :param match_type: The match_type of this ExclusionRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["PARTIAL", "FULL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and match_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def exclusion_type(self):
        """Gets the exclusion_type of this ExclusionRule.  # noqa: E501

        The type of exclusion rule.  # noqa: E501

        :return: The exclusion_type of this ExclusionRule.  # noqa: E501
        :rtype: str
        """
        return self._exclusion_type

    @exclusion_type.setter
    def exclusion_type(self, exclusion_type):
        """Sets the exclusion_type of this ExclusionRule.

        The type of exclusion rule.  # noqa: E501

        :param exclusion_type: The exclusion_type of this ExclusionRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGEX", "WORD_LIST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and exclusion_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `exclusion_type` ({0}), must be one of {1}"  # noqa: E501
                .format(exclusion_type, allowed_values)
            )

        self._exclusion_type = exclusion_type

    @property
    def regex(self):
        """Gets the regex of this ExclusionRule.  # noqa: E501


        :return: The regex of this ExclusionRule.  # noqa: E501
        :rtype: Regex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this ExclusionRule.


        :param regex: The regex of this ExclusionRule.  # noqa: E501
        :type: Regex
        """

        self._regex = regex

    @property
    def word_list(self):
        """Gets the word_list of this ExclusionRule.  # noqa: E501


        :return: The word_list of this ExclusionRule.  # noqa: E501
        :rtype: WordList
        """
        return self._word_list

    @word_list.setter
    def word_list(self, word_list):
        """Sets the word_list of this ExclusionRule.


        :param word_list: The word_list of this ExclusionRule.  # noqa: E501
        :type: WordList
        """

        self._word_list = word_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExclusionRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExclusionRule):
            return True

        return self.to_dict() != other.to_dict()
