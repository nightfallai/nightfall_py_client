# coding: utf-8

"""
    Methods

    This API exposes detectors for sensitive data in arbitrary string payloads.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Detector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'detector_type': 'DetectorType',
        'nightfall_detector': 'NightfallDetectorType',
        'regex': 'Regex',
        'word_list': 'WordList',
        'context_rules': 'list[ContextRule]',
        'exclusion_rules': 'list[ExclusionRule]'
    }

    attribute_map = {
        'display_name': 'displayName',
        'detector_type': 'detectorType',
        'nightfall_detector': 'nightfallDetector',
        'regex': 'regex',
        'word_list': 'wordList',
        'context_rules': 'contextRules',
        'exclusion_rules': 'exclusionRules'
    }

    def __init__(self, display_name=None, detector_type=None, nightfall_detector=None, regex=None, word_list=None, context_rules=None, exclusion_rules=None, local_vars_configuration=None):  # noqa: E501
        """Detector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._detector_type = None
        self._nightfall_detector = None
        self._regex = None
        self._word_list = None
        self._context_rules = None
        self._exclusion_rules = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if detector_type is not None:
            self.detector_type = detector_type
        if nightfall_detector is not None:
            self.nightfall_detector = nightfall_detector
        if regex is not None:
            self.regex = regex
        if word_list is not None:
            self.word_list = word_list
        if context_rules is not None:
            self.context_rules = context_rules
        if exclusion_rules is not None:
            self.exclusion_rules = exclusion_rules

    @property
    def display_name(self):
        """Gets the display_name of this Detector.  # noqa: E501

        The display name for this detector's findings in the response.  # noqa: E501

        :return: The display_name of this Detector.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Detector.

        The display name for this detector's findings in the response.  # noqa: E501

        :param display_name: The display_name of this Detector.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def detector_type(self):
        """Gets the detector_type of this Detector.  # noqa: E501


        :return: The detector_type of this Detector.  # noqa: E501
        :rtype: DetectorType
        """
        return self._detector_type

    @detector_type.setter
    def detector_type(self, detector_type):
        """Sets the detector_type of this Detector.


        :param detector_type: The detector_type of this Detector.  # noqa: E501
        :type: DetectorType
        """

        self._detector_type = detector_type

    @property
    def nightfall_detector(self):
        """Gets the nightfall_detector of this Detector.  # noqa: E501


        :return: The nightfall_detector of this Detector.  # noqa: E501
        :rtype: NightfallDetectorType
        """
        return self._nightfall_detector

    @nightfall_detector.setter
    def nightfall_detector(self, nightfall_detector):
        """Sets the nightfall_detector of this Detector.


        :param nightfall_detector: The nightfall_detector of this Detector.  # noqa: E501
        :type: NightfallDetectorType
        """

        self._nightfall_detector = nightfall_detector

    @property
    def regex(self):
        """Gets the regex of this Detector.  # noqa: E501


        :return: The regex of this Detector.  # noqa: E501
        :rtype: Regex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Detector.


        :param regex: The regex of this Detector.  # noqa: E501
        :type: Regex
        """

        self._regex = regex

    @property
    def word_list(self):
        """Gets the word_list of this Detector.  # noqa: E501


        :return: The word_list of this Detector.  # noqa: E501
        :rtype: WordList
        """
        return self._word_list

    @word_list.setter
    def word_list(self, word_list):
        """Sets the word_list of this Detector.


        :param word_list: The word_list of this Detector.  # noqa: E501
        :type: WordList
        """

        self._word_list = word_list

    @property
    def context_rules(self):
        """Gets the context_rules of this Detector.  # noqa: E501

        A list of context rules.  # noqa: E501

        :return: The context_rules of this Detector.  # noqa: E501
        :rtype: list[ContextRule]
        """
        return self._context_rules

    @context_rules.setter
    def context_rules(self, context_rules):
        """Sets the context_rules of this Detector.

        A list of context rules.  # noqa: E501

        :param context_rules: The context_rules of this Detector.  # noqa: E501
        :type: list[ContextRule]
        """

        self._context_rules = context_rules

    @property
    def exclusion_rules(self):
        """Gets the exclusion_rules of this Detector.  # noqa: E501

        A list of exclusion rules.  # noqa: E501

        :return: The exclusion_rules of this Detector.  # noqa: E501
        :rtype: list[ExclusionRule]
        """
        return self._exclusion_rules

    @exclusion_rules.setter
    def exclusion_rules(self, exclusion_rules):
        """Sets the exclusion_rules of this Detector.

        A list of exclusion rules.  # noqa: E501

        :param exclusion_rules: The exclusion_rules of this Detector.  # noqa: E501
        :type: list[ExclusionRule]
        """

        self._exclusion_rules = exclusion_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Detector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Detector):
            return True

        return self.to_dict() != other.to_dict()
